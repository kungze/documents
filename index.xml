<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kungze on Kungze 文档</title><link>https://kungze.github.io/documents/</link><description>Recent content in Kungze on Kungze 文档</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://kungze.github.io/documents/index.xml" rel="self" type="application/rss+xml"/><item><title>kolla-helm</title><link>https://kungze.github.io/documents/kolla-helm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kungze.github.io/documents/kolla-helm/</guid><description>kolla-helm 包含一些列 helm chart，基于这些 chart 我们可以很容易的在 k8s 平台上部署 openstack，在 openstack 社区有一个 openstack-helm 项目 提供了类似的功能，但是由于 openstack-helm 设计过于复杂，项目活跃度底，不兼容最新的 helm v3，所以我们打算提供一套新的 chart。 我们为什么叫 kolla-helm 呢？顾名思义，我们想要借助 kolla 容器来完成新版 chart 的编写。 借助这些 chart 你可以有多种方式来轻松的部署 openstack
通过命令行部署 你可以通过 helm 命令部署 openstack。
图形化部署 你还可以通过 kubeapp 提供的 web UI 轻松的部署 openstack。
该目录下面的文档时以命令行部署的方式展示如何通过 kolla-helm 部署 openstack。</description></item><item><title>quic-tun</title><link>https://kungze.github.io/documents/quic-tun/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kungze.github.io/documents/quic-tun/</guid><description>在我们内部，我们称 quic-tun 为弱网神器，尤其是在存在丢包现象的网络环境中， quic-tun 能极大改善 TCP 应用的网络传输。quic-tun 项目包含两个程序，quictun-server 和 quictun-client，其核心原理 可以用一句话概述：quictun-server 把 server 端 TCP/UNIX-SOCKET 应用的传输层协议转为 QUIC， 然后 quictun-client 在把 QUIC 转为 TCP/UNIX-SOCKET，客户端应用程序只需要连接到 quictun-client 服务就可以和 server 端应用程序 交互了。
通过这种转换，quictun-server 和 quictun-client 之间的网络传输使用的是 QUIC 协议，QUIC 使用了优秀的重传算法和拥塞控制算法，能轻松 应对复杂网络环境。因此对于整体的网络状况会有极大优化。关于 quic-tun 对网络传输的优化，我们做了一些测试，并编写了测试报告， 想了解更多信息，请点击查看。
架构图 quic-tun 不仅有优化 TCP 传输的作用，他还能把 TCP 应用转为 UNIX-SOCKET 应用，UNIX-SOCKET 应用转为 TCP 应用，其架构图如下：
使用方法 调整内核参数，增大缓存区，详细原因，请参考官方文档。 server 端和 client 端都要调整这个参数。
sysctl -w net.core.rmem_max=2500000 打开 release 页面，下载最新版本的 quic-tun，并解压
wget https://github.com/kungze/quic-tun/releases/download/v0.0.2/quic-tun_0.0.2_linux_amd64.tar.gz tar xvfz quic-tun_0.0.2_linux_amd64.tar.gz 注意：0.0.2 是编写该文档时的最新版本。</description></item><item><title>ubuntu-develop-env</title><link>https://kungze.github.io/documents/ubuntu-develop-env/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kungze.github.io/documents/ubuntu-develop-env/</guid><description>ubuntu-develop-env 用于快速在 k8s 平台启动一个独立的开发调试环境，当研发人员想开发一个基于 k8s 的组件，尤其是这个组件 还与 k8s 平台上的其他组件或服务有交互时，这个组件的调试工作将会尤为困难。另外在多人团队中，为每个人打造一套隔离的开发调试 环境减少相互之间的干扰也能大大提高开发效率。
快速开始 helm repo add kungze https://charts.kungze.net helm install ubuntu-develop-env kungze/ubuntu-develop-env 在部署成功后可以使用 ssh 登录
ssh ubuntu@&amp;lt;宿主机节点 IP&amp;gt; -p 30022 密码为 ChangeMe
详细说明 在通过 helm 部署成功后，相应的 release 会包含一个 statefulset 很一个 nodeport 类型 的 service。这个 statefulset 的 pod 的副本数为 1。pod 的 /home 目录默认会被挂载到宿主机的 /data/ubuntu 目录（可以通过 --set hostConf.homeDirPath 指定别的目录），这样即使发送意外 情况导致 pod 重建 /home 目录下的数据也会被保留，所以在使用这个环境时 要注意把重要数据放在 /home 目录下。还可以通过 --set homeStorageClass=&amp;lt;storageclass 名称&amp;gt; 来为 pod 的 /home 目录分配持久化存储。需要特别注意的是：在部署多个环境时我们需要通过 --set hostConf.</description></item><item><title>博文</title><link>https://kungze.github.io/documents/blog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kungze.github.io/documents/blog/</guid><description/></item></channel></rss>