<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kolla-helm on Kungze 文档</title><link>https://kungze.github.io/documents/kolla-helm/</link><description>Recent content in kolla-helm on Kungze 文档</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://kungze.github.io/documents/kolla-helm/index.xml" rel="self" type="application/rss+xml"/><item><title>准备工作</title><link>https://kungze.github.io/documents/kolla-helm/preparation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kungze.github.io/documents/kolla-helm/preparation/</guid><description>部署 k8s 首先我们需要有一套 k8s 集群，k8s 集群可以有多种方式，由于国内网络环境的问题，我们推荐两个可以在国内丝滑部署 k8s 集群的方案
kubeadm，可以参考我们的文档在国内使用 kubeadm 部署 k8s kubeasz，这是由国内大神编写的一套部署 k8s 的 ansible 脚本，可以满足各种需要，使用方式可以参考这个项目的文档 需要特别注意的是：为了能在宿主机节点上解析 k8s service 的域名（方便在宿主机上执行 openstack 命令）， nodelocaldns 是强烈推荐安装的。
部署 metallb 我们提供的方案需要在裸金属上直接部署 k8s，所以我们需要部署 metallb 为 loadbalancer 类型的 service 提供支撑，部署方式可以参考文档。 另外 openelb 也是一个不错的方案，但是 openelb 作者没有部署过，感兴趣的可以自己找文档研究部署。
部署 rook（可选） rook 是一个开源的云原生存储编排平台，可以用来管理 ceph 集群，当我们 设置 cinder，glance，nova 的后端存储为 ceph 时，我们先必须要部署 rook，并使用 rook 创建创建一个 ceph 集群 或者纳管一个外部的 ceph 集群。
ceph 集群（可选） 我们可以参考官方文档 使用 rook 创建 一套 ceph 集群，但是在生产环境中我们更推荐使用传统先行部署一套 ceph 集群，然后再用 rook 纳管已经部署好的 ceph 集群。ceph 集群的部署可以使用 ceph-ansible，rook 纳管已经存在的 ceph 集群的方法可以参考文档.</description></item><item><title>通用中间件部署</title><link>https://kungze.github.io/documents/kolla-helm/dependency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kungze.github.io/documents/kolla-helm/dependency/</guid><description>通用中间件包括 mariadb，rabbitmq，memcached，nginx-ingress-controller 这些中间件我们都通用封装在了 openstack-dep chart 中了。
部署 password chart 在部署 openstack 的过程中会注册很多数据库和 keystone 用户，对应的我们需要设置很多密码，为了后面部署方便和密 码的安全性，我们专门编写了一个 password chart，部署这个 chart 可以随机生成一些密码，后面我们在部署其他项目时 不用在关心密码问题。
$ helm -n openstack install openstack-passwork kolla-helm/password NAME: openstack-passwork LAST DEPLOYED: Mon Jun 6 14:15:45 2022 NAMESPACE: openstack STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: CHART NAME: password CHART VERSION: 1.0.0 ** Please be patient while the chart is being deployed ** Check the Secret: kubectl get secret --namespace openstack openstack-passwork -o yaml 部署 openstack-dep openstack-dep 把部署 openstack 所需要的中间件封装在一个 chart 里，通过这种方式后续部署 openstack 其他项目时可以共用这一套中间件：</description></item><item><title>部署 keystone</title><link>https://kungze.github.io/documents/kolla-helm/keystone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kungze.github.io/documents/kolla-helm/keystone/</guid><description>keystone 是 openstack 的认证和服务发现组件。
部署 keystone helm -n openstack install openstack-keystone kolla-helm/keystone 安装 openstackclient 安装 openstack 命令行，在安装完成后可以通过执行 openstack 命令验证安装是否成功。
apt install python3-openstackclient 创建 openstackrc 文件 openstack 认证相关信息会存放在一个专门的 secert （openstack-keystone，与 keystone chart 的 release 名称一致） 中，在 shell 终端执行下面命令导出 OS_* 相关环境变量以便后续 openstack 命令能正常执行。另外特别要注意：openstack 相 关的组件的 API 服务都是通过 service 暴露的，因此要求执行命令的节点能解析 k8s service de 域名（需要安装 nodelocaldns 插件）。
export OS_USERNAME=$(kubectl get secret -n openstack openstack-keystone -o jsonpath=&amp;#34;{.data.OS_USERNAME}&amp;#34; | base64 --decode) export OS_PROJECT_DOMAIN_NAME=$(kubectl get secret -n openstack openstack-keystone -o jsonpath=&amp;#34;{.</description></item><item><title>部署 cinder</title><link>https://kungze.github.io/documents/kolla-helm/cinder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kungze.github.io/documents/kolla-helm/cinder/</guid><description>目前 kolla-helm 支持部署两种 cinder 后端：lvm 和 ceph。但是 lvm 仅用于测试，正式使用推荐 ceph。
部署 cinder 仅安装 lvm 后端 helm install -n openstack openstack-cinder kolla-helm/cinder --set ceph.enabled=false 注意：lvm 后建议仅用于测试，cinder chart 会创建一个 loop 设备作为 lvm 的 pv 设备，可以通过 参数 lvm.loop_device_directory 和 lvm.loop_device_size 来指定 loop 文件在宿主机上 的存放目录和大小。
仅安装 ceph 后端 特别注意的是，ceph 后端依赖 rook，如果想开启 ceph 后端，需要在 部署 cinder 之前安装 rook，并用 rook 创建一个 ceph 集群或使用 rook 纳管一个外部的 ceph 集群。
helm install -n openstack openstack-cinder kolla-helm/cinder \ --set lvm.</description></item><item><title>部署 glance</title><link>https://kungze.github.io/documents/kolla-helm/glance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kungze.github.io/documents/kolla-helm/glance/</guid><description>目前 kolla-helm 支持部署两种 glance 后端存储：file 和 ceph。
部署 glance 使用 file 做为存储后端 helm install -n openstack openstack-glance kolla-helm/glance --set ceph.enabled=false 创建的 image 文件，将存储在 pod 名称为“ glance-api-xxxx” 的 /var/lib/glance/images/ 目录下，默认通过 hostPath 的方式映射到宿主机的 /var/lib/glance/images/ 目录下。
使用 ceph 做为存储后端 特别注意的是，ceph 后端依赖 rook，如果想使用 ceph 做为存储后端，需要在
部署 glance 之前安装 rook，并用 rook 创建一个 ceph 集群或使用 rook 纳管一个外部的 ceph 集群。
helm install -n openstack openstack-glance kolla-helm/glance \ --set ceph.cephClusterNamespace=rook-ceph \ --set ceph.</description></item><item><title>开发文档</title><link>https://kungze.github.io/documents/kolla-helm/developer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kungze.github.io/documents/kolla-helm/developer/</guid><description>这篇文档会深入介绍 kolla-helm 各个 chart 之间是如何配合的，chart 内部 job 的执行顺序以及如何通过 ingress 向外部暴露 openstack 组件的 api 服务。
通用 chart 在 koll-helm 有三个 chart 比较特殊：common，password，openstack-dep 这个三个都不是以 openstack 服务命名的，我们称它们为通用 chart。
common
common chart 是一个 library chart，包含了很多通用模板（template）和模板函数（template function）,这个 chart 无法直接部署，只能作为其他 chart 的依赖。
password
这个 chart 的作用与 kolla-ansible 的 kolla-genpwd 命令作用类似，password chart 会自动生成部署 openstack 服务所需的 密码（主要是数据库用户密码和 keystone 用户密码），这些密码会存储在一个特定的 secert（名称与 password chart release 名称相同）中。
apiVersion:v1data:cinder-database-password:akNMc3hBVWUzWA==cinder-keystone-password:T3FSbnNvTTg2Yg==cinder-rbd-secret-uuid:ZjVhM2ZmNTQtODU3Mi00ZmY3LWI4N2ItM2MzNDcyMDJkNDFkglance-database-password:WlpuTXdOaXdlQQ==glance-keystone-password:WVJWSEhRelFUcw==keystone-admin-password:ajdGNWhGN25hVQ==keystone-database-password:OEI0S2ZCdU5VQg==mariadb-password:dVZCbFE4S2RXaA==mariadb-replication-password:bXJveHZTdjJObg==mariadb-root-password:TEROdVpxakNBYg==neutron-database-password:MUZwMHp3SmVBUw==neutron-keystone-password:ZUlRcWNyNjlibA==nova-database-password:NzF3bWEzODJ4MQ==nova-keystone-password:Q2pKUWJ5VWhsSg==placement-database-password:eEhDWUFlVVRTWg==placement-keystone-password:c2JoNmQxWHpIcg==rabbitmq-password:RXpvdXZFc2t1Wg==rbd-secret-uuid:MjI4ZWQ2M2MtYjAwYy00ZWVkLWE2ZGUtYmMzNTM4NzJkYzMzkind:Secretmetadata:annotations:meta.helm.sh/release-name:openstack-passwordmeta.helm.sh/release-namespace:openstackcreationTimestamp:&amp;#34;2022-06-06T06:33:11Z&amp;#34;labels:app.kubernetes.io/managed-by:Helmname:openstack-passwordnamespace:openstackresourceVersion:&amp;#34;23578343&amp;#34;uid:f8501cd3-31ab-497e-a0ae-2f93432ab15atype:Opaque openstack-dep
这个 chart 主要安装 openstack 组件依赖的通用的服务，如：mariadb，rabbitmq，memcached。还有一个 nginx-ingress-controller， 主要用于统一 openstack 各个服务对外暴露的 endpoint。另外要说明的是这个 chart 仅是封装了 bitnami 提供的对应的 chart，如果想了解各个服务的详细信息和参数请参考 bitnami 文档。</description></item></channel></rss>