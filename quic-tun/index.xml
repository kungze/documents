<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>quic-tun on Kungze 文档</title><link>https://kungze.github.io/documents/quic-tun/</link><description>Recent content in quic-tun on Kungze 文档</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://kungze.github.io/documents/quic-tun/index.xml" rel="self" type="application/rss+xml"/><item><title>SSL</title><link>https://kungze.github.io/documents/quic-tun/ssl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kungze.github.io/documents/quic-tun/ssl/</guid><description>SSL（安全套接字层）在 TCP 协议中是可选的，但是 QUIC 协议中 SSL 是强制存在的。在该章节我们专门介绍 SSL 在 quic-tun 中的应用。 该文档默认您已经掌握 SSL 涉及到的概念：公钥，私钥，证书，CA。SSL 的功能主要有两个：数据加密、认证。该文档主要针对第二点，介绍 一下 SSL 认证功能在 quic-tun 中的应用。
相关参数 --ca-file 指定 CA 证书，在 quictun-client 需要是为 quictun-server 的公钥签名的 CA 的证书；在 quictun-server 需 要是为 quictun-client 的公钥签名的证书 --cert-file 指定证书文件（经过 CA 签名的公钥） --key-file 指定私钥文件 --verify-remote-endpoint 该参数在 quictun-server 端用于指定是否验证 quictun-client，当 quictun-server 配置该参数时, 那么 quictun-client 启动时必须有--cert-file 和 --key-file 参数。 该参数在 quictun-client 端用于指定是否验证 quictun-server 的证书，当 quictun-client 配置该参时，表明需要验证 quictun-server 的证书，这时候 quictun-client 的 --ca-file 参数是必须要传的。 QUIC 协议中加密是强制要求的，但是认证是可选的。而加密工作依赖于服务端的的私钥和证书，在 quic-tun 中指定私钥和证书的参数分别 是 --key-file 和 --cert-file。如果在启动 quictun-server 是不指定这两个参数，quictun-server 会自动创建一个临时的 私钥和证书并进行自签名。</description></item><item><title>token</title><link>https://kungze.github.io/documents/quic-tun/token/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kungze.github.io/documents/quic-tun/token/</guid><description>token 在 quic-tun 中有两个作用：1、告诉 server endpoint，准备新建的隧道需要连接的 应用程序的地址；2、用于 server endpoint 判断是否接受隧道创建请求。在 quictun-client我们 提供了一些 token 获取插件，在 quictun-server 我们提供了一些 token 的解析插件。
Token 获取插件 token 的获取工作是在quictun-client中完成的，在 quictun-client 我们提供了两个命令行参数：--token-source-plugin 和 --token-source 用来在启动时加载指定的 token 获取插件。--token-source-plugin 用于指定插件名称，--token-source 的 参数值会作为插件初始化时的参数。目前我们支持的 token 获取插件如下：
Fixed 固定 token，这个插件一个 quictun-client 只有一个 token，这也就意味着一个 quictun-client 服务只能 为一个固定的 server 应用程序建立隧道，也就是说所有连接到这个 quictun-client 服务的 client 应用程序都 会连接到一个固定的 server 服务。
示例：
./quictun-client --listen-on tcp:127.0.0.1:6500 --server-endpoint 172.18.31.36:7500 --token-source-plugin Fixed --token-source tcp:172.18.30.117:22 注意：Fixed 是 quictun-clint 默认的 token source plugin，如果你不知道则默认使用这个 plugin。</description></item><item><title>性能测试报告</title><link>https://kungze.github.io/documents/quic-tun/performance-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kungze.github.io/documents/quic-tun/performance-test/</guid><description>为了验证 quic-tun 对网络传输性能的影响，我们做了一些测试，并编写了这个测试报告。测试过程中我们 主要关注三个指标：传输带宽，网络延迟，CPU 使用率。在测试过程中我们构造了不同丢包率的网络环境， 然后对比不同丢包率的网络环境下：TCP 直接传输和通过 quic-tun 转换之后传输这两种情况下前面三 个指标的不同。
测试环境和测试工具 两个 VMware workstation 虚机，一个作为 server 端，一个作为 client 端，后面简称 server 或者 client 一个公网虚机，这个用于测试 quic-tun 在公网环境的表现。公网虚机作为 server 端，位于阿里云华东区，clien 端是一个 VMware 虚机，测试时本人位于天津 操作系统：ubuntu 20.02 带宽测试工具：iperf3 测试过程中使用 top 命令 观察 CPU 情况 对于网络延迟，我没有找到一个比较好的测试工具，因此我自己用 python 脚本编写了 一个测试工具。
如何设置不同的丢包率 我们使用 VMware workstation 自带的功能来设置不同的丢包率，设置方法如下：
在测试过程中我们仅改变了 client 的丢包率，server 没有设置丢包率，并且 传入和传出丢包率设置一致。</description></item></channel></rss>